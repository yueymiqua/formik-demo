import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Formik, Form, useField } from 'formik'
import * as Yup from 'yup'

const MyInputText = ({ label, ...props }) => {
  const [field, meta] = useField(props)
  return (
    <>
      <label htmlFor={props.id || props.name}>{label}</label>
      <input className="text-input" {...field} {...props} />
      {meta.touched && meta.error ? (
        <div className="error">{meta.error}</div>
      ) : null}
    </>
  )
}

const MyCheckBox = ({ label, ...props}) => {
  const [field, meta] = useField({...props, type: "Checkbox"});
  return (
    <div>
      <label className="checkbox-label">
        <input type="checkbox" {...field} {...props} />
        {children}
      </label>
      {meta.touched && meta.error ? (
        <div className="error">{meta.error}</div>
      ) : null }
    </div>
  )
}

const MySelect = ({ label, ...props}) => {
  const [field, meta] = useField({...props})
  return(
    <div>
      <label htmlFor= {props.id || props.name}>{label}</label>
    </div>
  )
}

export default function Home() {

  return (
    <div className={styles.container}>
      <Head>
        <title>Formik Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Formik
          initialValues={{ firstName: "", lastName: "", email: "" }}
          validationSchema={Yup.object({
            firstName: Yup.string()
              .max(15, 'Must be 15 characters or less')
              .required('Required'),
            lastName: Yup.string()
              .max(20, 'Must be 20 characters or less')
              .required('Required'),
            email: Yup.string().email('Invalid email address').required('Required')
          })}
          onSubmit={(values, { setSubmitting}) => {
            setTimeout(() => {
              alert(JSON.stringify(values, null, 2));
              setSubmitting(false);
            }, 400);
          }}
        >
          <Form>
            <label htmlFor="firstName">First Name</label>
            <Field name="firstName" type="text" />
            <ErrorMessage name="firstName"/>

            <label htmlFor="lastName">Last Name</label>
            <Field name="lastName" type="text" />
            <ErrorMessage name="lastName"/>
            
            <label htmlFor="email">Email</label>
            <Field name="email" type="email" />
            <ErrorMessage name="email"/>

            <button type="submit">Submit</button>
          </Form>
        </Formik>
      </main>
    </div>
  )
}
